// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/media/v1/media.proto

package media

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MediaService_UploadMedia_FullMethodName       = "/media.v1.MediaService/UploadMedia"
	MediaService_UploadMediaStream_FullMethodName = "/media.v1.MediaService/UploadMediaStream"
	MediaService_GetMedia_FullMethodName          = "/media.v1.MediaService/GetMedia"
	MediaService_ListMedia_FullMethodName         = "/media.v1.MediaService/ListMedia"
	MediaService_UpdateMedia_FullMethodName       = "/media.v1.MediaService/UpdateMedia"
	MediaService_DeleteMedia_FullMethodName       = "/media.v1.MediaService/DeleteMedia"
	MediaService_GetMediaVariants_FullMethodName  = "/media.v1.MediaService/GetMediaVariants"
	MediaService_ProcessMedia_FullMethodName      = "/media.v1.MediaService/ProcessMedia"
)

// MediaServiceClient is the client API for MediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Media service definition
type MediaServiceClient interface {
	// Upload media (non-streaming) - single request with complete file
	UploadMedia(ctx context.Context, in *UploadMediaRequest, opts ...grpc.CallOption) (*UploadMediaResponse, error)
	// Upload media with streaming - file sent in chunks
	UploadMediaStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadMediaChunk, UploadMediaResponse], error)
	// Get media by ID
	GetMedia(ctx context.Context, in *GetMediaRequest, opts ...grpc.CallOption) (*GetMediaResponse, error)
	// List media with filters
	ListMedia(ctx context.Context, in *ListMediaRequest, opts ...grpc.CallOption) (*ListMediaResponse, error)
	// Update media metadata
	UpdateMedia(ctx context.Context, in *UpdateMediaRequest, opts ...grpc.CallOption) (*UpdateMediaResponse, error)
	// Delete media
	DeleteMedia(ctx context.Context, in *DeleteMediaRequest, opts ...grpc.CallOption) (*DeleteMediaResponse, error)
	// Get media variants
	GetMediaVariants(ctx context.Context, in *GetMediaVariantsRequest, opts ...grpc.CallOption) (*GetMediaVariantsResponse, error)
	// Process media
	ProcessMedia(ctx context.Context, in *ProcessMediaRequest, opts ...grpc.CallOption) (*ProcessMediaResponse, error)
}

type mediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaServiceClient(cc grpc.ClientConnInterface) MediaServiceClient {
	return &mediaServiceClient{cc}
}

func (c *mediaServiceClient) UploadMedia(ctx context.Context, in *UploadMediaRequest, opts ...grpc.CallOption) (*UploadMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_UploadMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) UploadMediaStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadMediaChunk, UploadMediaResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MediaService_ServiceDesc.Streams[0], MediaService_UploadMediaStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadMediaChunk, UploadMediaResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediaService_UploadMediaStreamClient = grpc.ClientStreamingClient[UploadMediaChunk, UploadMediaResponse]

func (c *mediaServiceClient) GetMedia(ctx context.Context, in *GetMediaRequest, opts ...grpc.CallOption) (*GetMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_GetMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) ListMedia(ctx context.Context, in *ListMediaRequest, opts ...grpc.CallOption) (*ListMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_ListMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) UpdateMedia(ctx context.Context, in *UpdateMediaRequest, opts ...grpc.CallOption) (*UpdateMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_UpdateMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) DeleteMedia(ctx context.Context, in *DeleteMediaRequest, opts ...grpc.CallOption) (*DeleteMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_DeleteMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetMediaVariants(ctx context.Context, in *GetMediaVariantsRequest, opts ...grpc.CallOption) (*GetMediaVariantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMediaVariantsResponse)
	err := c.cc.Invoke(ctx, MediaService_GetMediaVariants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) ProcessMedia(ctx context.Context, in *ProcessMediaRequest, opts ...grpc.CallOption) (*ProcessMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_ProcessMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaServiceServer is the server API for MediaService service.
// All implementations must embed UnimplementedMediaServiceServer
// for forward compatibility.
//
// Media service definition
type MediaServiceServer interface {
	// Upload media (non-streaming) - single request with complete file
	UploadMedia(context.Context, *UploadMediaRequest) (*UploadMediaResponse, error)
	// Upload media with streaming - file sent in chunks
	UploadMediaStream(grpc.ClientStreamingServer[UploadMediaChunk, UploadMediaResponse]) error
	// Get media by ID
	GetMedia(context.Context, *GetMediaRequest) (*GetMediaResponse, error)
	// List media with filters
	ListMedia(context.Context, *ListMediaRequest) (*ListMediaResponse, error)
	// Update media metadata
	UpdateMedia(context.Context, *UpdateMediaRequest) (*UpdateMediaResponse, error)
	// Delete media
	DeleteMedia(context.Context, *DeleteMediaRequest) (*DeleteMediaResponse, error)
	// Get media variants
	GetMediaVariants(context.Context, *GetMediaVariantsRequest) (*GetMediaVariantsResponse, error)
	// Process media
	ProcessMedia(context.Context, *ProcessMediaRequest) (*ProcessMediaResponse, error)
	mustEmbedUnimplementedMediaServiceServer()
}

// UnimplementedMediaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMediaServiceServer struct{}

func (UnimplementedMediaServiceServer) UploadMedia(context.Context, *UploadMediaRequest) (*UploadMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMedia not implemented")
}
func (UnimplementedMediaServiceServer) UploadMediaStream(grpc.ClientStreamingServer[UploadMediaChunk, UploadMediaResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadMediaStream not implemented")
}
func (UnimplementedMediaServiceServer) GetMedia(context.Context, *GetMediaRequest) (*GetMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedia not implemented")
}
func (UnimplementedMediaServiceServer) ListMedia(context.Context, *ListMediaRequest) (*ListMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedia not implemented")
}
func (UnimplementedMediaServiceServer) UpdateMedia(context.Context, *UpdateMediaRequest) (*UpdateMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedia not implemented")
}
func (UnimplementedMediaServiceServer) DeleteMedia(context.Context, *DeleteMediaRequest) (*DeleteMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedia not implemented")
}
func (UnimplementedMediaServiceServer) GetMediaVariants(context.Context, *GetMediaVariantsRequest) (*GetMediaVariantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaVariants not implemented")
}
func (UnimplementedMediaServiceServer) ProcessMedia(context.Context, *ProcessMediaRequest) (*ProcessMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessMedia not implemented")
}
func (UnimplementedMediaServiceServer) mustEmbedUnimplementedMediaServiceServer() {}
func (UnimplementedMediaServiceServer) testEmbeddedByValue()                      {}

// UnsafeMediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaServiceServer will
// result in compilation errors.
type UnsafeMediaServiceServer interface {
	mustEmbedUnimplementedMediaServiceServer()
}

func RegisterMediaServiceServer(s grpc.ServiceRegistrar, srv MediaServiceServer) {
	// If the following call pancis, it indicates UnimplementedMediaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MediaService_ServiceDesc, srv)
}

func _MediaService_UploadMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).UploadMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_UploadMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).UploadMedia(ctx, req.(*UploadMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_UploadMediaStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MediaServiceServer).UploadMediaStream(&grpc.GenericServerStream[UploadMediaChunk, UploadMediaResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediaService_UploadMediaStreamServer = grpc.ClientStreamingServer[UploadMediaChunk, UploadMediaResponse]

func _MediaService_GetMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_GetMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetMedia(ctx, req.(*GetMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_ListMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).ListMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_ListMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).ListMedia(ctx, req.(*ListMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_UpdateMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).UpdateMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_UpdateMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).UpdateMedia(ctx, req.(*UpdateMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_DeleteMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).DeleteMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_DeleteMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).DeleteMedia(ctx, req.(*DeleteMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetMediaVariants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaVariantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetMediaVariants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_GetMediaVariants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetMediaVariants(ctx, req.(*GetMediaVariantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_ProcessMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).ProcessMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_ProcessMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).ProcessMedia(ctx, req.(*ProcessMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaService_ServiceDesc is the grpc.ServiceDesc for MediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "media.v1.MediaService",
	HandlerType: (*MediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadMedia",
			Handler:    _MediaService_UploadMedia_Handler,
		},
		{
			MethodName: "GetMedia",
			Handler:    _MediaService_GetMedia_Handler,
		},
		{
			MethodName: "ListMedia",
			Handler:    _MediaService_ListMedia_Handler,
		},
		{
			MethodName: "UpdateMedia",
			Handler:    _MediaService_UpdateMedia_Handler,
		},
		{
			MethodName: "DeleteMedia",
			Handler:    _MediaService_DeleteMedia_Handler,
		},
		{
			MethodName: "GetMediaVariants",
			Handler:    _MediaService_GetMediaVariants_Handler,
		},
		{
			MethodName: "ProcessMedia",
			Handler:    _MediaService_ProcessMedia_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadMediaStream",
			Handler:       _MediaService_UploadMediaStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/media/v1/media.proto",
}
